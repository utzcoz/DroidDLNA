package com.github.cling.test;

import android.os.Build;

import org.fourthline.cling.model.types.UDN;
import org.fourthline.cling.model.types.UnsignedIntegerFourBytes;
import org.fourthline.cling.support.model.Channel;
import org.fourthline.cling.support.model.ProtocolInfo;
import org.seamless.util.MimeType;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class Utils {
    public static final String MANUFACTURER = android.os.Build.MANUFACTURER;
    public static final String DMR_NAME = "MSI MediaRenderer";

    public static final String DMR_DESC = "MSI MediaRenderer";
    public static final String DMR_MODEL_URL = "http://4thline.org/projects/cling/mediarenderer/";

    public static UDN uniqueSystemIdentifier() {
        String salt = "msidmr";
        StringBuilder systemSalt = new StringBuilder();
        systemSalt.append(getUUID());
        systemSalt.append(Build.MODEL);
        systemSalt.append(Build.MANUFACTURER);
        return new UDN(new UUID(Long.MAX_VALUE, salt.hashCode()));
    }

    public static String getRenderName() {
        return "Cling Test Local Render";
    }

    public static String getUUID() {
        // Random uuid generated by openssl, just for test
        return "PJqQPF+Zfdi1T50Lncs=";
    }

    public static Channel[] getChannels() {
        return new Channel[]{Channel.Master};
    }

    public static UnsignedIntegerFourBytes getDefaultInstanceId() {
        return new UnsignedIntegerFourBytes(1);
    }

    public static List<ProtocolInfo> generateSinkProtocolInfoList() {
        List<ProtocolInfo> infoList = new ArrayList<>();
        infoList.add(new ProtocolInfo(MimeType.valueOf("image/jpeg")));
        infoList.add(new ProtocolInfo(MimeType.valueOf("image/png")));
        infoList.add(new ProtocolInfo(MimeType.valueOf("image/gif")));
        infoList.add(new ProtocolInfo(MimeType.valueOf("image/bmp")));
        infoList.add(new ProtocolInfo(MimeType.valueOf("image/pjpeg")));
        infoList.add(new ProtocolInfo(MimeType.valueOf("image/tiff")));
        infoList.add(new ProtocolInfo(MimeType.valueOf("image/x-ms-bmp")));

        infoList.add(new ProtocolInfo(MimeType.valueOf("video/3gpp")));
        infoList.add(new ProtocolInfo(MimeType.valueOf("video/mp4")));
        infoList.add(new ProtocolInfo(MimeType.valueOf("video/3gp2")));
        infoList.add(new ProtocolInfo(MimeType.valueOf("video/avi")));
        infoList.add(new ProtocolInfo(MimeType.valueOf("video/flv")));
        infoList.add(new ProtocolInfo(MimeType.valueOf("video/mpeg")));
        infoList.add(new ProtocolInfo(MimeType.valueOf("video/x-mkv")));
        infoList.add(new ProtocolInfo(MimeType.valueOf("video/x-matroska")));
        infoList.add(new ProtocolInfo(MimeType.valueOf("video/msvideo")));
        infoList.add(new ProtocolInfo(MimeType.valueOf("video/quicktime")));
        infoList.add(new ProtocolInfo(MimeType.valueOf("video/x-msvideo")));
        infoList.add(new ProtocolInfo(MimeType.valueOf("video/x-ms-wmv")));

        infoList.add(new ProtocolInfo(MimeType.valueOf("audio/aac")));
        infoList.add(new ProtocolInfo(MimeType.valueOf("audio/3gpp")));
        infoList.add(new ProtocolInfo(MimeType.valueOf("audio/amr")));
        infoList.add(new ProtocolInfo(MimeType.valueOf("audio/ogg")));
        infoList.add(new ProtocolInfo(MimeType.valueOf("audio/mpeg")));
        infoList.add(new ProtocolInfo(MimeType.valueOf("audio/midi")));
        infoList.add(new ProtocolInfo(MimeType.valueOf("audio/x-midi")));
        infoList.add(new ProtocolInfo(MimeType.valueOf("audio/x-mid")));
        infoList.add(new ProtocolInfo(MimeType.valueOf("audio/x-wav")));
        infoList.add(new ProtocolInfo(MimeType.valueOf("audio/x-ms-wma")));
        return infoList;
    }
}
